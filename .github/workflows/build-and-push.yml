# .github/workflows/build-and-push.yml
name: Docker Image Build with BuildKit on ARC

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    runs-on: gh-arc-runner-set # Use your self-hosted ARC runners
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install Docker Buildx CLI. This action primarily ensures the 'buildx' binary is present.
      # It does NOT attempt to create a local daemon.
      - name: Install Buildx CLI
        uses: docker/setup-buildx-action@v3
        # No 'driver' or 'endpoint' inputs here. Just installs the CLI.

      # Diagnostic step: Check network connectivity to the BuildKit daemon.
      # This helps to confirm if the runner can reach the BuildKit service.
      - name: Check BuildKit Daemon Connectivity
        run: |
          BUILDER_ENDPOINT="buildkitd-service.buildkit.svc.cluster.local:1234"
          echo "Attempting to connect to BuildKit daemon at $BUILDER_ENDPOINT..."
          # Using netcat (nc) to check if the port is open and reachable
          # -z: zero-I/O mode (scans for listening daemons without sending any data)
          # -v: verbose output
          if nc -zv buildkitd-service.buildkit.svc.cluster.local 1234; then
            echo "Successfully connected to BuildKit daemon."
          else
            echo "Failed to connect to BuildKit daemon. Please check:"
            echo "1. Is the 'buildkitd' pod running and healthy in the 'buildkit' namespace?"
            echo "   kubectl get pods -n buildkit"
            echo "2. Is the 'buildkitd-service' correctly configured and pointing to the pod?"
            echo "   kubectl get service -n buildkit"
            echo "3. Are there any network policies or firewalls blocking traffic?"
            exit 1 # Fail the step if connectivity fails
          fi
        timeout-minutes: 1 # Give it a short timeout

      # Explicitly create and use a buildx builder that points to your remote BuildKit daemon.
      # This step ensures the correct builder context is set for subsequent docker build commands.
      - name: Create and Set Buildx Builder
        run: |
          BUILDER_NAME="my-remote-buildkit-builder"
          BUILDER_ENDPOINT="tcp://buildkitd-service.buildkit.svc.cluster.local:1234"

          # Check if the builder already exists to avoid errors on retry
          if ! docker buildx inspect $BUILDER_NAME > /dev/null 2>&1; then
            docker buildx create --name $BUILDER_NAME --driver remote $BUILDER_ENDPOINT
          fi
          docker buildx use $BUILDER_NAME
          docker buildx inspect --bootstrap # Ensure it starts and connects
        timeout-minutes: 5 # Increased timeout for builder creation/bootstrap

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: . # Path to your Dockerfile context
          file: ./Dockerfile # Path to your Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-app:latest
            ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-app:buildcache # Pull cache from registry
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-app:buildcache,mode=max # Push cache to registry
          # The 'builder' input here is optional if 'docker buildx use' was successful,
          # but can be used for explicit clarity.
          # builder: my-remote-buildkit-builder
